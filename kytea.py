# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _kytea
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _kytea.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _kytea.PySwigIterator_value(*args)
    def incr(*args): return _kytea.PySwigIterator_incr(*args)
    def decr(*args): return _kytea.PySwigIterator_decr(*args)
    def distance(*args): return _kytea.PySwigIterator_distance(*args)
    def equal(*args): return _kytea.PySwigIterator_equal(*args)
    def copy(*args): return _kytea.PySwigIterator_copy(*args)
    def next(*args): return _kytea.PySwigIterator_next(*args)
    def previous(*args): return _kytea.PySwigIterator_previous(*args)
    def advance(*args): return _kytea.PySwigIterator_advance(*args)
    def __eq__(*args): return _kytea.PySwigIterator___eq__(*args)
    def __ne__(*args): return _kytea.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _kytea.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _kytea.PySwigIterator___isub__(*args)
    def __add__(*args): return _kytea.PySwigIterator___add__(*args)
    def __sub__(*args): return _kytea.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _kytea.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class String(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, String, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, String, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _kytea.delete_String
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _kytea.new_String(*args)
        try: self.this.append(this)
        except: self.this = this
String_swigregister = _kytea.String_swigregister
String_swigregister(String)

class Word(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Word, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Word, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kytea.new_Word(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["surf"] = _kytea.Word_surf_set
    __swig_getmethods__["surf"] = _kytea.Word_surf_get
    if _newclass:surf = _swig_property(_kytea.Word_surf_get, _kytea.Word_surf_set)
    __swig_setmethods__["tags"] = _kytea.Word_tags_set
    __swig_getmethods__["tags"] = _kytea.Word_tags_get
    if _newclass:tags = _swig_property(_kytea.Word_tags_get, _kytea.Word_tags_set)
    __swig_setmethods__["isCertain"] = _kytea.Word_isCertain_set
    __swig_getmethods__["isCertain"] = _kytea.Word_isCertain_get
    if _newclass:isCertain = _swig_property(_kytea.Word_isCertain_get, _kytea.Word_isCertain_set)
    __swig_setmethods__["unknown"] = _kytea.Word_unknown_set
    __swig_getmethods__["unknown"] = _kytea.Word_unknown_get
    if _newclass:unknown = _swig_property(_kytea.Word_unknown_get, _kytea.Word_unknown_set)
    __swig_destroy__ = _kytea.delete_Word
    __del__ = lambda self : None;
Word_swigregister = _kytea.Word_swigregister
Word_swigregister(Word)

class StringUtil(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUtil, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringUtil, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def mapString(*args): return _kytea.StringUtil_mapString(*args)
    def showString(*args): return _kytea.StringUtil_showString(*args)
    def getEncodingString(*args): return _kytea.StringUtil_getEncodingString(*args)
    __swig_destroy__ = _kytea.delete_StringUtil
    __del__ = lambda self : None;
StringUtil_swigregister = _kytea.StringUtil_swigregister
StringUtil_swigregister(StringUtil)

class Sentence(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sentence, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sentence, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chars"] = _kytea.Sentence_chars_set
    __swig_getmethods__["chars"] = _kytea.Sentence_chars_get
    if _newclass:chars = _swig_property(_kytea.Sentence_chars_get, _kytea.Sentence_chars_set)
    __swig_setmethods__["wsConfs"] = _kytea.Sentence_wsConfs_set
    __swig_getmethods__["wsConfs"] = _kytea.Sentence_wsConfs_get
    if _newclass:wsConfs = _swig_property(_kytea.Sentence_wsConfs_get, _kytea.Sentence_wsConfs_set)
    __swig_setmethods__["words"] = _kytea.Sentence_words_set
    __swig_getmethods__["words"] = _kytea.Sentence_words_get
    if _newclass:words = _swig_property(_kytea.Sentence_words_get, _kytea.Sentence_words_set)
    def __init__(self, *args): 
        this = _kytea.new_Sentence(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kytea.delete_Sentence
    __del__ = lambda self : None;
Sentence_swigregister = _kytea.Sentence_swigregister
Sentence_swigregister(Sentence)

class Config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kytea.new_Config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kytea.delete_Config
    __del__ = lambda self : None;
    def parseTrainCommandLine(*args): return _kytea.Config_parseTrainCommandLine(*args)
    def parseRunCommandLine(*args): return _kytea.Config_parseRunCommandLine(*args)
    def printUsage(*args): return _kytea.Config_printUsage(*args)
    def printVersion(*args): return _kytea.Config_printVersion(*args)
    def getDictionaryFiles(*args): return _kytea.Config_getDictionaryFiles(*args)
    def getSubwordDictFiles(*args): return _kytea.Config_getSubwordDictFiles(*args)
    def getModelFile(*args): return _kytea.Config_getModelFile(*args)
    def getModelFormat(*args): return _kytea.Config_getModelFormat(*args)
    def getDebug(*args): return _kytea.Config_getDebug(*args)
    def getStringUtil(*args): return _kytea.Config_getStringUtil(*args)
    def getCharN(*args): return _kytea.Config_getCharN(*args)
    def getCharWindow(*args): return _kytea.Config_getCharWindow(*args)
    def getTypeN(*args): return _kytea.Config_getTypeN(*args)
    def getTypeWindow(*args): return _kytea.Config_getTypeWindow(*args)
    def getDictionaryN(*args): return _kytea.Config_getDictionaryN(*args)
    def getUnkN(*args): return _kytea.Config_getUnkN(*args)
    def getTagMax(*args): return _kytea.Config_getTagMax(*args)
    def getUnkBeam(*args): return _kytea.Config_getUnkBeam(*args)
    def getUnkTag(*args): return _kytea.Config_getUnkTag(*args)
    def getDefaultTag(*args): return _kytea.Config_getDefaultTag(*args)
    def getBias(*args): return _kytea.Config_getBias(*args)
    def getEpsilon(*args): return _kytea.Config_getEpsilon(*args)
    def getCost(*args): return _kytea.Config_getCost(*args)
    def getSolverType(*args): return _kytea.Config_getSolverType(*args)
    def getDoWS(*args): return _kytea.Config_getDoWS(*args)
    def getDoTags(*args): return _kytea.Config_getDoTags(*args)
    def getDoTag(*args): return _kytea.Config_getDoTag(*args)
    def getWordBound(*args): return _kytea.Config_getWordBound(*args)
    def getTagBound(*args): return _kytea.Config_getTagBound(*args)
    def getElemBound(*args): return _kytea.Config_getElemBound(*args)
    def getUnkBound(*args): return _kytea.Config_getUnkBound(*args)
    def getNoBound(*args): return _kytea.Config_getNoBound(*args)
    def getHasBound(*args): return _kytea.Config_getHasBound(*args)
    def getSkipBound(*args): return _kytea.Config_getSkipBound(*args)
    def getEscape(*args): return _kytea.Config_getEscape(*args)
    def getConfidence(*args): return _kytea.Config_getConfidence(*args)
    def getEncoding(*args): return _kytea.Config_getEncoding(*args)
    def getEncodingString(*args): return _kytea.Config_getEncodingString(*args)
    def getNumTags(*args): return _kytea.Config_getNumTags(*args)
    def getGlobal(*args): return _kytea.Config_getGlobal(*args)
    def getArguments(*args): return _kytea.Config_getArguments(*args)
    def setDebug(*args): return _kytea.Config_setDebug(*args)
    def setModelFile(*args): return _kytea.Config_setModelFile(*args)
    def setModelFormat(*args): return _kytea.Config_setModelFormat(*args)
    def setEpsilon(*args): return _kytea.Config_setEpsilon(*args)
    def setCost(*args): return _kytea.Config_setCost(*args)
    def setBias(*args): return _kytea.Config_setBias(*args)
    def setSolverType(*args): return _kytea.Config_setSolverType(*args)
    def setCharWindow(*args): return _kytea.Config_setCharWindow(*args)
    def setCharN(*args): return _kytea.Config_setCharN(*args)
    def setTypeWindow(*args): return _kytea.Config_setTypeWindow(*args)
    def setTypeN(*args): return _kytea.Config_setTypeN(*args)
    def setDictionaryN(*args): return _kytea.Config_setDictionaryN(*args)
    def setUnkN(*args): return _kytea.Config_setUnkN(*args)
    def setTagMax(*args): return _kytea.Config_setTagMax(*args)
    def setUnkBeam(*args): return _kytea.Config_setUnkBeam(*args)
    def setUnkTag(*args): return _kytea.Config_setUnkTag(*args)
    def setDefaultTag(*args): return _kytea.Config_setDefaultTag(*args)
    def setOnTraining(*args): return _kytea.Config_setOnTraining(*args)
    def setDoWS(*args): return _kytea.Config_setDoWS(*args)
    def setDoTags(*args): return _kytea.Config_setDoTags(*args)
    def setDoTag(*args): return _kytea.Config_setDoTag(*args)
    def setWordBound(*args): return _kytea.Config_setWordBound(*args)
    def setTagBound(*args): return _kytea.Config_setTagBound(*args)
    def setElemBound(*args): return _kytea.Config_setElemBound(*args)
    def setUnkBound(*args): return _kytea.Config_setUnkBound(*args)
    def setNoBound(*args): return _kytea.Config_setNoBound(*args)
    def setHasBound(*args): return _kytea.Config_setHasBound(*args)
    def setSkipBound(*args): return _kytea.Config_setSkipBound(*args)
    def setEscape(*args): return _kytea.Config_setEscape(*args)
    def setNumTags(*args): return _kytea.Config_setNumTags(*args)
    def setGlobal(*args): return _kytea.Config_setGlobal(*args)
    def setEncoding(*args): return _kytea.Config_setEncoding(*args)
Config_swigregister = _kytea.Config_swigregister
Config_swigregister(Config)

class Kytea(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Kytea, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Kytea, name)
    __repr__ = _swig_repr
    def readModel(*args): return _kytea.Kytea_readModel(*args)
    def writeModel(*args): return _kytea.Kytea_writeModel(*args)
    def calculateWS(*args): return _kytea.Kytea_calculateWS(*args)
    def calculateTags(*args): return _kytea.Kytea_calculateTags(*args)
    def calculateUnknownTag(*args): return _kytea.Kytea_calculateUnknownTag(*args)
    def getStringUtil(*args): return _kytea.Kytea_getStringUtil(*args)
    def analyze(*args): return _kytea.Kytea_analyze(*args)
    def __init__(self, *args): 
        this = _kytea.new_Kytea(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _kytea.delete_Kytea
    __del__ = lambda self : None;
Kytea_swigregister = _kytea.Kytea_swigregister
Kytea_swigregister(Kytea)

class Words(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Words, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Words, name)
    __repr__ = _swig_repr
    def iterator(*args): return _kytea.Words_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _kytea.Words___nonzero__(*args)
    def __len__(*args): return _kytea.Words___len__(*args)
    def pop(*args): return _kytea.Words_pop(*args)
    def __getslice__(*args): return _kytea.Words___getslice__(*args)
    def __setslice__(*args): return _kytea.Words___setslice__(*args)
    def __delslice__(*args): return _kytea.Words___delslice__(*args)
    def __delitem__(*args): return _kytea.Words___delitem__(*args)
    def __getitem__(*args): return _kytea.Words___getitem__(*args)
    def __setitem__(*args): return _kytea.Words___setitem__(*args)
    def append(*args): return _kytea.Words_append(*args)
    def empty(*args): return _kytea.Words_empty(*args)
    def size(*args): return _kytea.Words_size(*args)
    def clear(*args): return _kytea.Words_clear(*args)
    def swap(*args): return _kytea.Words_swap(*args)
    def get_allocator(*args): return _kytea.Words_get_allocator(*args)
    def begin(*args): return _kytea.Words_begin(*args)
    def end(*args): return _kytea.Words_end(*args)
    def rbegin(*args): return _kytea.Words_rbegin(*args)
    def rend(*args): return _kytea.Words_rend(*args)
    def pop_back(*args): return _kytea.Words_pop_back(*args)
    def erase(*args): return _kytea.Words_erase(*args)
    def __init__(self, *args): 
        this = _kytea.new_Words(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _kytea.Words_push_back(*args)
    def front(*args): return _kytea.Words_front(*args)
    def back(*args): return _kytea.Words_back(*args)
    def assign(*args): return _kytea.Words_assign(*args)
    def resize(*args): return _kytea.Words_resize(*args)
    def insert(*args): return _kytea.Words_insert(*args)
    def reserve(*args): return _kytea.Words_reserve(*args)
    def capacity(*args): return _kytea.Words_capacity(*args)
    __swig_destroy__ = _kytea.delete_Words
    __del__ = lambda self : None;
Words_swigregister = _kytea.Words_swigregister
Words_swigregister(Words)

class Floats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Floats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Floats, name)
    __repr__ = _swig_repr
    def iterator(*args): return _kytea.Floats_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _kytea.Floats___nonzero__(*args)
    def __len__(*args): return _kytea.Floats___len__(*args)
    def pop(*args): return _kytea.Floats_pop(*args)
    def __getslice__(*args): return _kytea.Floats___getslice__(*args)
    def __setslice__(*args): return _kytea.Floats___setslice__(*args)
    def __delslice__(*args): return _kytea.Floats___delslice__(*args)
    def __delitem__(*args): return _kytea.Floats___delitem__(*args)
    def __getitem__(*args): return _kytea.Floats___getitem__(*args)
    def __setitem__(*args): return _kytea.Floats___setitem__(*args)
    def append(*args): return _kytea.Floats_append(*args)
    def empty(*args): return _kytea.Floats_empty(*args)
    def size(*args): return _kytea.Floats_size(*args)
    def clear(*args): return _kytea.Floats_clear(*args)
    def swap(*args): return _kytea.Floats_swap(*args)
    def get_allocator(*args): return _kytea.Floats_get_allocator(*args)
    def begin(*args): return _kytea.Floats_begin(*args)
    def end(*args): return _kytea.Floats_end(*args)
    def rbegin(*args): return _kytea.Floats_rbegin(*args)
    def rend(*args): return _kytea.Floats_rend(*args)
    def pop_back(*args): return _kytea.Floats_pop_back(*args)
    def erase(*args): return _kytea.Floats_erase(*args)
    def __init__(self, *args): 
        this = _kytea.new_Floats(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _kytea.Floats_push_back(*args)
    def front(*args): return _kytea.Floats_front(*args)
    def back(*args): return _kytea.Floats_back(*args)
    def assign(*args): return _kytea.Floats_assign(*args)
    def resize(*args): return _kytea.Floats_resize(*args)
    def insert(*args): return _kytea.Floats_insert(*args)
    def reserve(*args): return _kytea.Floats_reserve(*args)
    def capacity(*args): return _kytea.Floats_capacity(*args)
    __swig_destroy__ = _kytea.delete_Floats
    __del__ = lambda self : None;
Floats_swigregister = _kytea.Floats_swigregister
Floats_swigregister(Floats)

class KyteaTag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KyteaTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KyteaTag, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _kytea.new_KyteaTag(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _kytea.KyteaTag_first_set
    __swig_getmethods__["first"] = _kytea.KyteaTag_first_get
    if _newclass:first = _swig_property(_kytea.KyteaTag_first_get, _kytea.KyteaTag_first_set)
    __swig_setmethods__["second"] = _kytea.KyteaTag_second_set
    __swig_getmethods__["second"] = _kytea.KyteaTag_second_get
    if _newclass:second = _swig_property(_kytea.KyteaTag_second_get, _kytea.KyteaTag_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _kytea.delete_KyteaTag
    __del__ = lambda self : None;
KyteaTag_swigregister = _kytea.KyteaTag_swigregister
KyteaTag_swigregister(KyteaTag)

class KyteaTagVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KyteaTagVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KyteaTagVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _kytea.KyteaTagVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _kytea.KyteaTagVector___nonzero__(*args)
    def __len__(*args): return _kytea.KyteaTagVector___len__(*args)
    def pop(*args): return _kytea.KyteaTagVector_pop(*args)
    def __getslice__(*args): return _kytea.KyteaTagVector___getslice__(*args)
    def __setslice__(*args): return _kytea.KyteaTagVector___setslice__(*args)
    def __delslice__(*args): return _kytea.KyteaTagVector___delslice__(*args)
    def __delitem__(*args): return _kytea.KyteaTagVector___delitem__(*args)
    def __getitem__(*args): return _kytea.KyteaTagVector___getitem__(*args)
    def __setitem__(*args): return _kytea.KyteaTagVector___setitem__(*args)
    def append(*args): return _kytea.KyteaTagVector_append(*args)
    def empty(*args): return _kytea.KyteaTagVector_empty(*args)
    def size(*args): return _kytea.KyteaTagVector_size(*args)
    def clear(*args): return _kytea.KyteaTagVector_clear(*args)
    def swap(*args): return _kytea.KyteaTagVector_swap(*args)
    def get_allocator(*args): return _kytea.KyteaTagVector_get_allocator(*args)
    def begin(*args): return _kytea.KyteaTagVector_begin(*args)
    def end(*args): return _kytea.KyteaTagVector_end(*args)
    def rbegin(*args): return _kytea.KyteaTagVector_rbegin(*args)
    def rend(*args): return _kytea.KyteaTagVector_rend(*args)
    def pop_back(*args): return _kytea.KyteaTagVector_pop_back(*args)
    def erase(*args): return _kytea.KyteaTagVector_erase(*args)
    def __init__(self, *args): 
        this = _kytea.new_KyteaTagVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _kytea.KyteaTagVector_push_back(*args)
    def front(*args): return _kytea.KyteaTagVector_front(*args)
    def back(*args): return _kytea.KyteaTagVector_back(*args)
    def assign(*args): return _kytea.KyteaTagVector_assign(*args)
    def resize(*args): return _kytea.KyteaTagVector_resize(*args)
    def insert(*args): return _kytea.KyteaTagVector_insert(*args)
    def reserve(*args): return _kytea.KyteaTagVector_reserve(*args)
    def capacity(*args): return _kytea.KyteaTagVector_capacity(*args)
    __swig_destroy__ = _kytea.delete_KyteaTagVector
    __del__ = lambda self : None;
KyteaTagVector_swigregister = _kytea.KyteaTagVector_swigregister
KyteaTagVector_swigregister(KyteaTagVector)

class Tags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tags, name)
    __repr__ = _swig_repr
    def iterator(*args): return _kytea.Tags_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _kytea.Tags___nonzero__(*args)
    def __len__(*args): return _kytea.Tags___len__(*args)
    def pop(*args): return _kytea.Tags_pop(*args)
    def __getslice__(*args): return _kytea.Tags___getslice__(*args)
    def __setslice__(*args): return _kytea.Tags___setslice__(*args)
    def __delslice__(*args): return _kytea.Tags___delslice__(*args)
    def __delitem__(*args): return _kytea.Tags___delitem__(*args)
    def __getitem__(*args): return _kytea.Tags___getitem__(*args)
    def __setitem__(*args): return _kytea.Tags___setitem__(*args)
    def append(*args): return _kytea.Tags_append(*args)
    def empty(*args): return _kytea.Tags_empty(*args)
    def size(*args): return _kytea.Tags_size(*args)
    def clear(*args): return _kytea.Tags_clear(*args)
    def swap(*args): return _kytea.Tags_swap(*args)
    def get_allocator(*args): return _kytea.Tags_get_allocator(*args)
    def begin(*args): return _kytea.Tags_begin(*args)
    def end(*args): return _kytea.Tags_end(*args)
    def rbegin(*args): return _kytea.Tags_rbegin(*args)
    def rend(*args): return _kytea.Tags_rend(*args)
    def pop_back(*args): return _kytea.Tags_pop_back(*args)
    def erase(*args): return _kytea.Tags_erase(*args)
    def __init__(self, *args): 
        this = _kytea.new_Tags(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _kytea.Tags_push_back(*args)
    def front(*args): return _kytea.Tags_front(*args)
    def back(*args): return _kytea.Tags_back(*args)
    def assign(*args): return _kytea.Tags_assign(*args)
    def resize(*args): return _kytea.Tags_resize(*args)
    def insert(*args): return _kytea.Tags_insert(*args)
    def reserve(*args): return _kytea.Tags_reserve(*args)
    def capacity(*args): return _kytea.Tags_capacity(*args)
    __swig_destroy__ = _kytea.delete_Tags
    __del__ = lambda self : None;
Tags_swigregister = _kytea.Tags_swigregister
Tags_swigregister(Tags)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _kytea.StringVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _kytea.StringVector___nonzero__(*args)
    def __len__(*args): return _kytea.StringVector___len__(*args)
    def pop(*args): return _kytea.StringVector_pop(*args)
    def __getslice__(*args): return _kytea.StringVector___getslice__(*args)
    def __setslice__(*args): return _kytea.StringVector___setslice__(*args)
    def __delslice__(*args): return _kytea.StringVector___delslice__(*args)
    def __delitem__(*args): return _kytea.StringVector___delitem__(*args)
    def __getitem__(*args): return _kytea.StringVector___getitem__(*args)
    def __setitem__(*args): return _kytea.StringVector___setitem__(*args)
    def append(*args): return _kytea.StringVector_append(*args)
    def empty(*args): return _kytea.StringVector_empty(*args)
    def size(*args): return _kytea.StringVector_size(*args)
    def clear(*args): return _kytea.StringVector_clear(*args)
    def swap(*args): return _kytea.StringVector_swap(*args)
    def get_allocator(*args): return _kytea.StringVector_get_allocator(*args)
    def begin(*args): return _kytea.StringVector_begin(*args)
    def end(*args): return _kytea.StringVector_end(*args)
    def rbegin(*args): return _kytea.StringVector_rbegin(*args)
    def rend(*args): return _kytea.StringVector_rend(*args)
    def pop_back(*args): return _kytea.StringVector_pop_back(*args)
    def erase(*args): return _kytea.StringVector_erase(*args)
    def __init__(self, *args): 
        this = _kytea.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _kytea.StringVector_push_back(*args)
    def front(*args): return _kytea.StringVector_front(*args)
    def back(*args): return _kytea.StringVector_back(*args)
    def assign(*args): return _kytea.StringVector_assign(*args)
    def resize(*args): return _kytea.StringVector_resize(*args)
    def insert(*args): return _kytea.StringVector_insert(*args)
    def reserve(*args): return _kytea.StringVector_reserve(*args)
    def capacity(*args): return _kytea.StringVector_capacity(*args)
    __swig_destroy__ = _kytea.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _kytea.StringVector_swigregister
StringVector_swigregister(StringVector)



